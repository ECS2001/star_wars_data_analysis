# -*- coding: utf-8 -*-
"""Cópia de Teste Globo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uB71VRCHPEhyrgd3VxVrpcZm4aqP_btO

**# ANÁLISE INICIAL DOS DADOS DA API**
"""

import requests
import pandas as pd

# Função para consumir dados da API SWAPI
def get_data_from_api(endpoint):
    url = f'https://swapi.dev/api/{endpoint}/'
    response = requests.get(url)
    data = response.json()
    return data['results']

# Exemplo para obter personagens
characters = get_data_from_api('people')
df_characters = pd.DataFrame(characters)
df_characters.head(1)

import requests
import pandas as pd

# Função para consumir dados da API SWAPI
def get_data_from_api(endpoint):
    url = f'https://swapi.dev/api/{endpoint}/'
    response = requests.get(url)
    data = response.json()
    return data['results']

# Exemplo para obter personagens
characters_ss = get_data_from_api('starships')
df_characters_ss = pd.DataFrame(characters_ss)
df_characters_ss.head()

import requests
import pandas as pd

# Função para consumir dados da API SWAPI
def get_data_from_api(endpoint):
    url = f'https://swapi.dev/api/{endpoint}/'
    response = requests.get(url)
    data = response.json()
    return data['results']

# Exemplo para obter personagens
characters_planet = get_data_from_api('planets')
df_characters_planet = pd.DataFrame(characters_planet)
df_characters_planet.head(1)

"""**# PROCESSO DE EXTRAÇÃO DOS DADOS, CRIAÇÃO DAS TABELAS NO BANCO + CONEXÃO E INSIGHTS**"""

import requests
import sqlite3
import pandas as pd
import json

# Função para obter os dados da API SWAPI
def fetch_data_from_api(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Erro ao fazer a requisição: {response.status_code}")
        return None

# Função para converter listas em strings JSON
def list_to_str(lst):
    if isinstance(lst, list):
        return json.dumps(lst)
    return lst

# Função para extrair dados de personagens da API SWAPI
def extract_characters_data():
    characters = []
    url = 'https://swapi.dev/api/people/'

    while url:
        data = fetch_data_from_api(url)
        if data:
            characters.extend(data['results'])  # Adiciona os resultados da página
            url = data['next']  # Pega o link para a próxima página
        else:
            break

    return characters

# Função para criar DataFrame de personagens
def create_characters_dataframe(characters_data):
    data_characters = {
        'name': [],
        'height': [],
        'mass': [],
        'hair_color': [],
        'skin_color': [],
        'eye_color': [],
        'birth_year': [],
        'gender': [],
        'homeworld': [],
        'films': [],
        'species': [],
        'vehicles': [],
        'starships': [],
        'created': [],
        'edited': [],
        'url': []
    }

    for character in characters_data:
        data_characters['name'].append(character['name'])
        data_characters['height'].append(character['height'])
        data_characters['mass'].append(character['mass'])
        data_characters['hair_color'].append(character['hair_color'])
        data_characters['skin_color'].append(character['skin_color'])
        data_characters['eye_color'].append(character['eye_color'])
        data_characters['birth_year'].append(character['birth_year'])
        data_characters['gender'].append(character['gender'])
        data_characters['homeworld'].append(character['homeworld'])
        data_characters['films'].append(character['films'])
        data_characters['species'].append(character['species'])
        data_characters['vehicles'].append(character['vehicles'])
        data_characters['starships'].append(character['starships'])
        data_characters['created'].append(character['created'])
        data_characters['edited'].append(character['edited'])
        data_characters['url'].append(character['url'])

    return pd.DataFrame(data_characters)

# Função para criar a tabela no banco de dados SQLite e inserir os dados
def insert_characters_into_sqlite(df_characters):
    # Criar conexão com o banco de dados (em memória ou no disco)
    conn = sqlite3.connect('characters_star_wars.db')  # Altere para um caminho persistente, se necessário
    cursor = conn.cursor()

    # Criar tabela de personagens
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS characters (
        name TEXT,
        height TEXT,
        mass TEXT,
        hair_color TEXT,
        skin_color TEXT,
        eye_color TEXT,
        birth_year TEXT,
        gender TEXT,
        homeworld TEXT,
        films TEXT,
        species TEXT,
        vehicles TEXT,
        starships TEXT,
        created TEXT,
        edited TEXT,
        url TEXT
    )
    ''')

    # Inserir os dados no banco de dados SQLite
    for row in df_characters.itertuples(index=False):
        try:
            row_data = tuple(list_to_str(val) for val in row)
            cursor.execute('''
            INSERT INTO characters (name, height, mass, hair_color, skin_color, eye_color, birth_year, gender, homeworld, films, species, vehicles, starships, created, edited, url)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', row_data)
        except Exception as e:
            print(f"Erro ao inserir a linha {row}: {e}")

    # Commit para salvar as mudanças
    conn.commit()

    # Verificar se os dados foram inseridos corretamente
    df_from_db = pd.read_sql('SELECT * FROM characters', conn)
    conn.close()
    return df_from_db

# Main script para extrair, transformar e carregar (ETL)
def main():
    # Extrair dados da API
    characters_data = extract_characters_data()

    # Criar DataFrame com os dados dos personagens
    df_characters = create_characters_dataframe(characters_data)

    # Inserir dados no banco de dados SQLite
    df_from_db = insert_characters_into_sqlite(df_characters)
    print(df_from_db.head(1))

    # Converter a coluna 'films' de volta para lista e contar o número de filmes para cada personagem
    df_from_db['films'] = df_from_db['films'].apply(json.loads)  # Converter JSON de volta para lista
    df_from_db['film_count'] = df_from_db['films'].apply(len)

    # Encontrar o personagem com mais aparições
    top_character = df_from_db.loc[df_from_db['film_count'].idxmax()]
    print()
    print()
    print(f"O personagem que apareceu em mais filmes é {top_character['name']} com {top_character['film_count']} aparições.")

# Executar o script
if __name__ == '__main__':
    main()

import requests
import sqlite3
import pandas as pd

# Função para obter os dados da API SWAPI
def fetch_data_from_api(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Erro ao fazer a requisição: {response.status_code}")
        return None

# Função para converter listas em strings separadas por vírgulas
def list_to_str(lst):
    if isinstance(lst, list):
        return ', '.join(lst)
    return lst

# Função para extrair dados de planetas da API SWAPI
def extract_planets_data():
    planets = []
    url = 'https://swapi.dev/api/planets/'

    while url:
        data = fetch_data_from_api(url)
        if data:
            planets.extend(data['results'])  # Adiciona os resultados da página
            url = data['next']  # Pega o link para a próxima página
        else:
            break

    return planets

# Função para criar DataFrame de planetas
def create_planets_dataframe(planets_data):
    data_planets = {
        'name': [],
        'rotation_period': [],
        'orbital_period': [],
        'diameter': [],
        'climate': [],
        'gravity': [],
        'terrain': [],
        'surface_water': [],
        'population': [],
        'residents': [],
        'films': [],
        'created': [],
        'edited': [],
        'url': []
    }

    for planet in planets_data:
        data_planets['name'].append(planet['name'])
        data_planets['rotation_period'].append(planet['rotation_period'])
        data_planets['orbital_period'].append(planet['orbital_period'])
        data_planets['diameter'].append(planet['diameter'])
        data_planets['climate'].append(planet['climate'])
        data_planets['gravity'].append(planet['gravity'])
        data_planets['terrain'].append(planet['terrain'])
        data_planets['surface_water'].append(planet['surface_water'])
        data_planets['population'].append(planet['population'])
        data_planets['residents'].append(planet['residents'])
        data_planets['films'].append(planet['films'])
        data_planets['created'].append(planet['created'])
        data_planets['edited'].append(planet['edited'])
        data_planets['url'].append(planet['url'])

    return pd.DataFrame(data_planets)

# Função para criar a tabela no banco de dados SQLite e inserir os dados
def insert_data_into_sqlite(df_planets):
    # Criar conexão com o banco de dados (em memória ou no disco)
    conn = sqlite3.connect(':memory:')  # Ou 'planets_star_wars.db'
    cursor = conn.cursor()

    # Criar tabela de planetas
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS planets (
        name TEXT,
        rotation_period TEXT,
        orbital_period TEXT,
        diameter TEXT,
        climate TEXT,
        gravity TEXT,
        terrain TEXT,
        surface_water TEXT,
        population TEXT,
        residents TEXT,
        films TEXT,
        created TEXT,
        edited TEXT,
        url TEXT
    )
    ''')

    # Inserir os dados no banco de dados SQLite
    for row in df_planets.itertuples(index=False):
        try:
            row_data = tuple(list_to_str(val) for val in row)
            cursor.execute('''
            INSERT INTO planets (name, rotation_period, orbital_period, diameter, climate, gravity, terrain, surface_water, population, residents, films, created, edited, url)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', row_data)
        except Exception as e:
            print(f"Erro ao inserir a linha {row}: {e}")

    # Commit para salvar as mudanças
    conn.commit()

    # Verificar se os dados foram inseridos corretamente
    df_from_db = pd.read_sql('SELECT * FROM planets', conn)
    conn.close()
    return df_from_db

# Main script para extrair, transformar e carregar (ETL)
def main():
    # Extrair dados da API
    planets_data = extract_planets_data()

    # Criar DataFrame com os dados dos planetas
    df_planets = create_planets_dataframe(planets_data)

    # Inserir dados no banco de dados SQLite
    df_from_db = insert_data_into_sqlite(df_planets)

    # Mostrar os primeiros 5 registros do banco
    print(df_from_db.head())


    # Definir climas quentes e filtrar planetas
    hot_climates = ['hot', 'arid', 'tropical']
    df_hot_planets = df_planets[df_planets['climate'].str.contains('|'.join(hot_climates), na=False)]

    # Exibir os planetas com climas quentes
    print()
    print()
    print("Planetas com climas quentes:")
    print(df_hot_planets[['name', 'climate']])


# Executar o script
if __name__ == '__main__':
    main()

import requests
import sqlite3
import pandas as pd

# Função para obter os dados da API SWAPI
def fetch_data_from_api(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Erro ao fazer a requisição: {response.status_code}")
        return None

# Função para converter listas em strings separadas por vírgulas
def list_to_str(lst):
    if isinstance(lst, list):
        return ', '.join(lst)
    return lst

# Função para extrair dados de naves espaciais da API SWAPI
def extract_starships_data():
    starships = []
    url = 'https://swapi.dev/api/starships/'

    while url:
        data = fetch_data_from_api(url)
        if data:
            starships.extend(data['results'])  # Adiciona os resultados da página
            url = data['next']  # Pega o link para a próxima página
        else:
            break

    return starships

# Função para criar DataFrame de naves espaciais
def create_starships_dataframe(starships_data):
    data_starships = {
        'name': [],
        'model': [],
        'manufacturer': [],
        'cost_in_credits': [],
        'length': [],
        'max_atmosphering_speed': [],
        'crew': [],
        'passengers': [],
        'cargo_capacity': [],
        'consumables': [],
        'hyperdrive_rating': [],
        'MGLT': [],
        'starship_class': [],
        'pilots': [],
        'films': [],
        'created': [],
        'edited': [],
        'url': []
    }

    for starship in starships_data:
        data_starships['name'].append(starship['name'])
        data_starships['model'].append(starship['model'])
        data_starships['manufacturer'].append(starship['manufacturer'])
        data_starships['cost_in_credits'].append(starship['cost_in_credits'])
        data_starships['length'].append(starship['length'])
        data_starships['max_atmosphering_speed'].append(starship['max_atmosphering_speed'])
        data_starships['crew'].append(starship['crew'])
        data_starships['passengers'].append(starship['passengers'])
        data_starships['cargo_capacity'].append(starship['cargo_capacity'])
        data_starships['consumables'].append(starship['consumables'])
        data_starships['hyperdrive_rating'].append(starship['hyperdrive_rating'])
        data_starships['MGLT'].append(starship['MGLT'])
        data_starships['starship_class'].append(starship['starship_class'])
        data_starships['pilots'].append(starship['pilots'])
        data_starships['films'].append(starship['films'])
        data_starships['created'].append(starship['created'])
        data_starships['edited'].append(starship['edited'])
        data_starships['url'].append(starship['url'])

    return pd.DataFrame(data_starships)

# Função para criar a tabela no banco de dados SQLite e inserir os dados
def insert_starships_into_sqlite(df_starships):
    # Criar conexão com o banco de dados (em memória)
    conn = sqlite3.connect(':memory:')
    cursor = conn.cursor()

    # Criar tabela de naves espaciais
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS starships (
        name TEXT,
        model TEXT,
        manufacturer TEXT,
        cost_in_credits TEXT,
        length TEXT,
        max_atmosphering_speed TEXT,
        crew TEXT,
        passengers TEXT,
        cargo_capacity TEXT,
        consumables TEXT,
        hyperdrive_rating TEXT,
        MGLT TEXT,
        starship_class TEXT,
        pilots TEXT,
        films TEXT,
        created TEXT,
        edited TEXT,
        url TEXT
    )
    ''')

    # Inserir os dados no banco de dados SQLite
    for row in df_starships.itertuples(index=False):
        try:
            row_data = tuple(list_to_str(val) for val in row)
            cursor.execute('''
            INSERT INTO starships (name, model, manufacturer, cost_in_credits, length, max_atmosphering_speed, crew, passengers, cargo_capacity, consumables, hyperdrive_rating, MGLT, starship_class, pilots, films, created, edited, url)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', row_data)
        except Exception as e:
            print(f"Erro ao inserir a linha {row}: {e}")

    # Commit para salvar as mudanças
    conn.commit()

    # Verificar se os dados foram inseridos corretamente
    df_from_db = pd.read_sql('SELECT * FROM starships', conn)
    conn.close()
    return df_from_db

# Main script para extrair, transformar e carregar (ETL)
def main():
    # Extrair dados da API
    starships_data = extract_starships_data()

    # Criar DataFrame com os dados das naves espaciais
    df_starships = create_starships_dataframe(starships_data)

    # Inserir dados no banco de dados SQLite
    df_from_db = insert_starships_into_sqlite(df_starships)

    # Mostrar os primeiros 5 registros do banco
    print(df_from_db.head(1))

    # Converter a coluna 'max_atmosphering_speed' para numérico
    df_starships['max_atmosphering_speed'] = pd.to_numeric(df_starships['max_atmosphering_speed'], errors='coerce')

    # Encontrar a nave mais rápida
    fastest_starship = df_starships.loc[df_starships['max_atmosphering_speed'].idxmax()]
    print()
    print()
    print(f"A nave mais rápida é {fastest_starship['name']} com velocidade de {fastest_starship['max_atmosphering_speed']}.")


# Executar o script
if __name__ == '__main__':
    main()

"""# ANÁLISE DOS INSIGHTS FEITAS POR SQL"""

# ***************** ANALISE COM SQL ********************

def run_sql_analyses(conn):
    cursor = conn.cursor()

    # 5.1: Personagem que apareceu em mais filmes (forma correta)
    query_5_1 = '''
    SELECT name, COUNT(films) AS film_count
    FROM characters
    GROUP BY name
    ORDER BY film_count DESC
    LIMIT 1;
    '''
    result_5_1 = cursor.execute(query_5_1).fetchone()
    print(f"5.1 - O personagem que apareceu em mais filmes é {result_5_1[0]} com {result_5_1[1]} aparições.\n")

    # 5.2: Planetas com climas quentes
    query_5_2 = '''
    SELECT name, climate
    FROM planets
    WHERE climate LIKE '%hot%' OR climate LIKE '%arid%' OR climate LIKE '%tropical%';
    '''
    result_5_2 = cursor.execute(query_5_2).fetchall()
    print(f"5.2 - Planetas com climas quentes:")
    for planet in result_5_2:
        print(f"- {planet[0]}: {planet[1]}")
    print()

    # 5.3: Nave mais rápida
    query_5_3 = '''
    SELECT name, max_atmosphering_speed
    FROM starships
    ORDER BY CAST(max_atmosphering_speed AS INTEGER) DESC
    LIMIT 1;
    '''
    result_5_3 = cursor.execute(query_5_3).fetchone()
    print(f"5.3 - A nave mais rápida é {result_5_3[0]} com velocidade de {result_5_3[1]}.")